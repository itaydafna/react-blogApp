import {Component} from 'react';

import {DeletePost} from './delete-post'

export const PostForm = ({parent})=> {
    return (<section className="col-sm-12">
            <h2 className="page-header">Edit Post</h2>
            {/* Invalid Input Alert */}
            {/* <div class="alert alert-danger" role="alert">
             The entered <strong>Title</strong> already exists in another post.
             </div> */}
            {/* <div class="alert alert-danger" role="alert">
             One or more required fields have no value.
             </div> */}
            <form>
                {/* Top Settings */}
                <div className="row">
                    <div className="col-sm-6">
                        <div className="form-group required">
                            <label htmlFor="postTitle">Title</label>
                            <input type="text" className="form-control" id="postTitle" name="postTitle" placeholder="Post Title" required autofocus defaultValue="Grunt - Custom Tasks" />
                        </div>
                        <div className="form-group required">
                            <label htmlFor="postAuthor">Author</label>
                            <input type="text" className="form-control" id="postAuthor" name="postAuthor" placeholder="Post Author" required defaultValue="Alex Ilyaev" />
                        </div>
                        <div className="form-group">
                            <label htmlFor="postTags">Tags</label>
                            <input type="text" className="form-control" id="postTags" name="postTags" placeholder="Post Tags" defaultValue="Grunt,Tools" />
                            <p className="help-block">Separate multiple tags with a comma.
                                e.g.<code>Grunt,Tools</code></p>
                        </div>
                    </div>
                    <div className="col-sm-6">
                        <div className="form-group required">
                            <label htmlFor="postDescription">Description</label>
                            <textarea className="form-control" id="postDescription" name="postDescription" rows={10} placeholder="Post Description" required defaultValue={"Tasks are grunt's bread and butter. The stuff you do most often, like jshint or nodeunit. Every time Grunt is run, you specify one or more tasks to run, which tells Grunt what you'd like it to do. You can go crazy with tasks. If your tasks don't follow the 'multi task' structure, use a custom task."} />
                        </div>
                    </div>
                </div>
                <hr />
                {/* Markdown and Live Preview */}
                <div className="row">
                    <div className="form-group required col-sm-6">
                        <label htmlFor="postMd">Markdown</label>
                        <textarea className="form-control previewPane" id="postMd" name="postMd" rows={20} placeholder="Post Markdown" required defaultValue={"Custom Tasks\n------------------\n\nBasic Gruntfile with a custom task that doesn't use Grunt plugins or configuration\n\n```js\nmodule.exports = function (grunt) {\n\tgrunt.registerTask('test', 'Log some stuff.', function () {\n\t\tgrunt.log.writeln('Logging some stuff...').ok();\n\t});\n};\n```\n\n- Check with `grunt -h`\n- Run `test`\n\n```js\n> grunt test\nRunning \"test\" task\nLogging some stuff...\nOK\n\nDone, without errors.\n```\n\n****\n\n### Alias Tasks\n\n> Setup a task name that runs other tasks, with optional arguments\n\n```js\nmodule.exports = function (grunt) {\n\tgrunt.registerTask('test', 'Log some stuff.', function (str) {\n\t\tgrunt.log.writeln(this.name, str);\n\t});\n\n\tgrunt.registerTask('hi', ['test:hello', 'test:world']);\n};\n```\n\n****\n\n### Failing tasks\n\n```js\ngrunt.registerTask('test', 'Say hi!', function (str) {\n\tif (!str) {\n\t\tgrunt.log.error('Expecting an argument to be passed.');\n\t\treturn false;\n\t}\n\n\tgrunt.log.writeln(this.name, str);\n});\n\ngrunt.registerTask('hi', ['test', 'test:World']);\n```\n\n- Subsequent tasks will be aborted\n\t\t\t\t\t\t\t"} />
                    </div>
                    <div className="col-sm-6">
                        <label>HTML Preview (read only)</label>
                        {/* Content generated by converting the Markdown to HTML */}
                        <div className="form-control previewPane">
                            <h2 id="hid-custom-tasks">Custom Tasks</h2>
                            <p>Basic Gruntfile with a custom task that doesnâ€™t use Grunt plugins or configuration</p>
                            <pre><code className="js">module.exports = function (grunt) {"{"}{"\n"}{"    "}grunt.registerTask('test', 'Log some stuff.', function () {"{"}{"\n"}{"        "}grunt.log.writeln('Logging some stuff...').ok();{"\n"}{"    "}{"}"});{"\n"}{"}"};{"\n"}</code></pre>
                            <ul>
                                <li>Check with <code>grunt -h</code></li>
                                <li>Run <code>test</code></li>
                            </ul>
                            <pre><code className="js">&gt; grunt test{"\n"}Running "test" task{"\n"}Logging some stuff...{"\n"}OK{"\n"}{"\n"}Done, without errors.{"\n"}</code></pre>
                            <hr />
                            <h3 id="hid-alias-tasks">Alias Tasks</h3>
                            <blockquote>
                                <p>Setup a task name that runs other tasks, with optional arguments</p>
                            </blockquote>
                            <pre><code className="js">module.exports = function (grunt) {"{"}{"\n"}{"    "}grunt.registerTask('test', 'Log some stuff.', function (str) {"{"}{"\n"}{"        "}grunt.log.writeln(this.name, str);{"\n"}{"    "}{"}"});{"\n"}{"\n"}{"    "}grunt.registerTask('hi', ['test:hello', 'test:world']);{"\n"}{"}"};{"\n"}</code></pre>
                            <hr />
                            <h3 id="hid-failing-tasks">Failing tasks</h3>
                            <pre><code className="js">grunt.registerTask('test', 'Say hi!', function (str) {"{"}{"\n"}{"    "}if (!str) {"{"}{"\n"}{"        "}grunt.log.error('Expecting an argument to be passed.');{"\n"}{"        "}return false;{"\n"}{"    "}{"}"}{"\n"}{"\n"}{"    "}grunt.log.writeln(this.name, str);{"\n"}{"}"});{"\n"}{"\n"}grunt.registerTask('hi', ['test', 'test:World']);{"\n"}</code></pre>
                            <ul>
                                <li>Subsequent tasks will be aborted</li>
                            </ul>
                        </div>
                    </div>
                </div>
                <hr />
                <button type="submit" className="btn btn-primary">Save Post</button>
                <DeletePost
                    parent = {parent}
                />
            </form>
        </section>
    );
};
